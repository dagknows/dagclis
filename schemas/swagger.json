{
  "swagger": "2.0",
  "info": {
    "title": "DagKnows API",
    "version": "1.0",
    "contact": {
      "name": "sri",
      "url": "https://github.com/dagknows/apigateway",
      "email": "sri@dagknows.com"
    },
    "license": {
      "name": "BSD 3-Clause License",
      "url": "https://github.com/bbengfort/notes/LICENSE"
    }
  },
  "tags": [
    {
      "name": "DagService"
    },
    {
      "name": "NodeService"
    },
    {
      "name": "SessionService"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/dags": {
      "get": {
        "summary": "Finds and retrieves dags matching the particular criteria.",
        "operationId": "DagService_ListDags",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apigatewayListDagsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.pageKey",
            "description": "Instead of an offset an abstract  \"page\" key is provided that offers\nan opaque \"pointer\" into some offset in a result set.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.pageSize",
            "description": "Number of results to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "title",
            "description": "Dags to filter title by.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DagService"
        ]
      },
      "post": {
        "summary": "Create a new Dag",
        "operationId": "DagService_CreateDag",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apigatewayCreateDagResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Dag being updated",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apigatewayDag"
            }
          }
        ],
        "tags": [
          "DagService"
        ]
      }
    },
    "/v1/dags/{dag.id}": {
      "patch": {
        "summary": "Updates specific fields of an Dag",
        "operationId": "DagService_UpdateDag",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apigatewayUpdateDagResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "dag.id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apigatewayUpdateDagRequest"
            }
          }
        ],
        "tags": [
          "DagService"
        ]
      }
    },
    "/v1/dags/{dagId}/executions": {
      "get": {
        "summary": "Lists all executions for a dag or a node",
        "operationId": "DagService_ListExecutions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apigatewayListExecutionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "dagId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "nodeId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DagService"
        ]
      }
    },
    "/v1/dags/{execution.dagId}/executions": {
      "post": {
        "summary": "Starts an execution of a dag.",
        "operationId": "DagService_Execute",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apigatewayExecuteDagResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "execution.dagId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apigatewayExecution"
            }
          }
        ],
        "tags": [
          "DagService"
        ]
      }
    },
    "/v1/dags/{id}": {
      "get": {
        "summary": "Get a single dag.",
        "operationId": "DagService_GetDag",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apigatewayGetDagResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DagService"
        ]
      },
      "delete": {
        "summary": "Deletes an dag from our system.",
        "operationId": "DagService_DeleteDag",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apigatewayDeleteDagResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the dag to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DagService"
        ]
      }
    },
    "/v1/dags:batchGet": {
      "get": {
        "summary": "Batch gets multiple dags.",
        "operationId": "DagService_GetDags",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apigatewayGetDagsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "DagService"
        ]
      }
    },
    "/v1/executions/{id}": {
      "get": {
        "summary": "Gets the status of an execution.",
        "operationId": "DagService_GetExecution",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apigatewayGetExecutionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the execution whose details are to be returned.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DagService"
        ]
      }
    },
    "/v1/nodes": {
      "get": {
        "summary": "Finds and retrieves nodes matching the particular criteria.",
        "operationId": "NodeService_ListNodes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apigatewayListNodesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.pageKey",
            "description": "Instead of an offset an abstract  \"page\" key is provided that offers\nan opaque \"pointer\" into some offset in a result set.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.pageSize",
            "description": "Number of results to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "title",
            "description": "Title to search for nodes by.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dagId",
            "description": "Which dag to search in.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "NodeService"
        ]
      },
      "post": {
        "summary": "Create a new Node",
        "operationId": "NodeService_CreateNode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apigatewayCreateNodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apigatewayCreateNodeRequest"
            }
          }
        ],
        "tags": [
          "NodeService"
        ]
      }
    },
    "/v1/nodes/{id}": {
      "get": {
        "summary": "Gets a single node",
        "operationId": "NodeService_GetNode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apigatewayGetNodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dagId",
            "description": "Nodes can have different topologies based on the\ndag they are in.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "NodeService"
        ]
      },
      "delete": {
        "summary": "Deletes an node from our system.",
        "operationId": "NodeService_DeleteNode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apigatewayDeleteNodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the node to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dagId",
            "description": "Limit the removal of the node only in a given dag.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "NodeService"
        ]
      }
    },
    "/v1/nodes/{node.node.id}": {
      "patch": {
        "summary": "Updates specific fields of an Node",
        "operationId": "NodeService_UpdateNode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apigatewayUpdateNodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "node.node.id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apigatewayUpdateNodeRequest"
            }
          }
        ],
        "tags": [
          "NodeService"
        ]
      }
    },
    "/v1/nodes:batchGet": {
      "get": {
        "summary": "Batch gets multiple nodes",
        "operationId": "NodeService_GetNodes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apigatewayGetNodesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dagId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "NodeService"
        ]
      }
    },
    "/v1/sessions": {
      "get": {
        "summary": "Finds and retrieves sessions matching the particular criteria.",
        "operationId": "SessionService_ListSessions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apigatewayListSessionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.pageKey",
            "description": "Instead of an offset an abstract  \"page\" key is provided that offers\nan opaque \"pointer\" into some offset in a result set.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.pageSize",
            "description": "Number of results to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "title",
            "description": "Title to search by.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SessionService"
        ]
      },
      "post": {
        "summary": "Create a new session",
        "operationId": "SessionService_CreateSession",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apigatewayCreateSessionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Session being updated",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apigatewaySession"
            }
          }
        ],
        "tags": [
          "SessionService"
        ]
      }
    },
    "/v1/sessions/{id}": {
      "get": {
        "summary": "Get details about a session.",
        "operationId": "SessionService_GetSession",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apigatewayGetSessionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SessionService"
        ]
      },
      "delete": {
        "summary": "Deletes an session from our system.",
        "operationId": "SessionService_DeleteSession",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apigatewayDeleteSessionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the session to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SessionService"
        ]
      }
    },
    "/v1/sessions/{session.id}": {
      "patch": {
        "summary": "Updates specific fields of an Session",
        "operationId": "SessionService_UpdateSession",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apigatewayUpdateSessionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "session.id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apigatewayUpdateSessionRequest"
            }
          }
        ],
        "tags": [
          "SessionService"
        ]
      }
    },
    "/v1/sessions:batchGet": {
      "get": {
        "summary": "Batch gets multiple sessions.",
        "operationId": "SessionService_GetSessions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apigatewayGetSessionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "SessionService"
        ]
      }
    }
  },
  "definitions": {
    "apigatewayAction": {
      "type": "object",
      "properties": {
        "script": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "description": "Actions are just bits of well \"actions\" that can be performed.",
      "title": "Action"
    },
    "apigatewayCreateDagResponse": {
      "type": "object",
      "properties": {
        "dag": {
          "$ref": "#/definitions/apigatewayDag",
          "title": "Dag being created"
        }
      },
      "description": "Response payload when creating Dags.",
      "title": "CreateDagResponse"
    },
    "apigatewayCreateNodeRequest": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/apigatewayDagNode",
          "description": "Node being created.  If this is a dag node its dag_id is\nset and its edges will also be set."
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apigatewayCreateNodeRequest"
          },
          "title": "We also want a child node to be created some times"
        }
      },
      "title": "CreateNodeRequest",
      "required": [
        "node"
      ]
    },
    "apigatewayCreateNodeResponse": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/apigatewayDagNode",
          "title": "Node being created"
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apigatewayCreateNodeResponse"
          },
          "description": "Response of the child nodes (if any)."
        }
      },
      "description": "Response payload when creating Nodes.",
      "title": "CreateNodeResponse"
    },
    "apigatewayCreateSessionResponse": {
      "type": "object",
      "properties": {
        "session": {
          "$ref": "#/definitions/apigatewaySession",
          "title": "Session being created"
        }
      },
      "description": "Response payload when creating Sessions.",
      "title": "CreateSessionResponse"
    },
    "apigatewayDag": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "nodes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Set of all node (ids) in our DAG."
        },
        "edges": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/apigatewayEdgeList"
          },
          "description": "Edges as a map from given node and its list of edges."
        }
      },
      "title": "Dag"
    },
    "apigatewayDagNode": {
      "type": "object",
      "properties": {
        "dagId": {
          "type": "string",
          "title": "Which dag we are getting the node in reference to"
        },
        "node": {
          "$ref": "#/definitions/apigatewayNode",
          "title": "The node we are referencing in this dag node"
        },
        "outEdges": {
          "$ref": "#/definitions/apigatewayEdgeList",
          "description": "List of all child nodes.  The children a node has depends on which dag it is being\nreferenced in so this is not part of the node but the node response itself."
        }
      },
      "description": "Nodes are unique in our system.  However their topology, ie\nchild and parent nodes depend on which dag they are being\nused/shown in.  So we have a special DagNode which is\nreally a kind of \"extension\" of a Node.",
      "title": "DagNode"
    },
    "apigatewayDeleteDagResponse": {
      "type": "object",
      "title": "DeleteDagResponse"
    },
    "apigatewayDeleteNodeResponse": {
      "type": "object",
      "title": "DeleteNodeResponse"
    },
    "apigatewayDeleteSessionResponse": {
      "type": "object",
      "title": "DeleteSessionResponse"
    },
    "apigatewayEdge": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "destNode": {
          "type": "string"
        }
      },
      "description": "List of directed edges.  Note that we are not keeping the\nsource/starting node id here and instead storing it in\nthe EdgeList message a. to avoid duplication and b. for\neasy indexing within the DAG.  Usually the edge-list will\nbe used in the context of a starting node anyway.",
      "title": "Edge"
    },
    "apigatewayEdgeList": {
      "type": "object",
      "properties": {
        "srcNode": {
          "type": "string"
        },
        "edges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apigatewayEdge"
          }
        }
      },
      "description": "List of edges for a given source node.  Edges are denoted as a destination\nedge and their metadata.",
      "title": "EdgeList"
    },
    "apigatewayExecuteDagResponse": {
      "type": "object",
      "properties": {
        "jobId": {
          "type": "string"
        }
      },
      "title": "ExecuteDagResponse"
    },
    "apigatewayExecution": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "dagId": {
          "type": "string"
        },
        "sessionId": {
          "type": "string"
        },
        "proxyAddress": {
          "type": "string"
        },
        "nodeHandle": {
          "type": "string"
        },
        "nodeId": {
          "type": "string"
        },
        "fullSubDag": {
          "type": "boolean"
        },
        "stopOnProblem": {
          "type": "boolean"
        },
        "params": {
          "type": "object"
        },
        "schedule": {
          "$ref": "#/definitions/apigatewayExecutionSchedule"
        },
        "onExecution": {
          "$ref": "#/definitions/apigatewayPostExecution"
        }
      },
      "description": "An execution of an entire dag or a particular node.",
      "title": "Execution"
    },
    "apigatewayExecutionSchedule": {
      "type": "object",
      "description": "A schedule of how and when Executions are to run and if/how they repeat.",
      "title": "ExecutionSchedule"
    },
    "apigatewayGetDagResponse": {
      "type": "object",
      "properties": {
        "dag": {
          "$ref": "#/definitions/apigatewayDag",
          "title": "Dag returned"
        }
      },
      "title": "GetDagResponse"
    },
    "apigatewayGetDagsResponse": {
      "type": "object",
      "properties": {
        "dags": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/apigatewayDag"
          },
          "description": "Dags mapped by their ID."
        }
      },
      "description": "Response for an dag batch get.",
      "title": "GetDagsResponse"
    },
    "apigatewayGetExecutionResponse": {
      "type": "object",
      "properties": {
        "execution": {
          "$ref": "#/definitions/apigatewayExecution",
          "description": "Matching execution to be returned."
        }
      },
      "title": "GetExecutionResponse"
    },
    "apigatewayGetNodeResponse": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/apigatewayDagNode",
          "description": "The node whose details we need.  Depending on whether\ndag_id is provided or not, this could be the static dag\nor a dynamic dag specific node."
        }
      },
      "description": "Response for an node get.",
      "title": "GetNodesRequest"
    },
    "apigatewayGetNodesResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/apigatewayDagNode"
          }
        }
      },
      "description": "Response for an node batch get."
    },
    "apigatewayGetSessionResponse": {
      "type": "object",
      "properties": {
        "session": {
          "$ref": "#/definitions/apigatewaySession",
          "description": "Sessions returned."
        }
      },
      "description": "Response for single session get.",
      "title": "GetSessionResponse"
    },
    "apigatewayGetSessionsResponse": {
      "type": "object",
      "properties": {
        "sessions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/apigatewaySession"
          },
          "description": "Sessions mapped by their ID."
        }
      },
      "description": "Response for an session batch get.",
      "title": "GetSessionsResponse"
    },
    "apigatewayListDagsResponse": {
      "type": "object",
      "properties": {
        "dags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apigatewayDag"
          },
          "description": "The list of dags found as part of this response."
        },
        "pagination": {
          "$ref": "#/definitions/apigatewayPaginationResponse",
          "title": "Details about continiung the pagination"
        }
      },
      "description": "Response of a dag search/listing.",
      "title": "ListDagsResponse"
    },
    "apigatewayListExecutionsResponse": {
      "type": "object",
      "properties": {
        "executions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apigatewayExecution"
          },
          "description": "List of matching executions to be returned."
        }
      },
      "description": "Response of a execugtion listing request.",
      "title": "ListExecutionsResponse"
    },
    "apigatewayListNodesResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apigatewayDagNode"
          },
          "description": "The list of nodes found as part of this response."
        },
        "pagination": {
          "$ref": "#/definitions/apigatewayPagination",
          "title": "Pagination parameters"
        }
      },
      "title": "ListNodesResponse"
    },
    "apigatewayListSessionsResponse": {
      "type": "object",
      "properties": {
        "sessions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apigatewaySession"
          },
          "description": "The list of sessions found as part of this response."
        },
        "pagination": {
          "$ref": "#/definitions/apigatewayPaginationResponse",
          "title": "Details about continiung the pagination"
        }
      },
      "description": "Response of a session search/listing.",
      "title": "ListSessionsResponse"
    },
    "apigatewayNode": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "detection": {
          "$ref": "#/definitions/apigatewayAction"
        },
        "remediation": {
          "$ref": "#/definitions/apigatewayAction"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "inputParams": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "Node"
    },
    "apigatewayNodeOperation": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "string",
          "title": "ID of the node being operated on"
        },
        "operation": {
          "type": "string",
          "title": "\"add\" or \"remove\" for now"
        }
      }
    },
    "apigatewayPagination": {
      "type": "object",
      "properties": {
        "pageKey": {
          "type": "string",
          "description": "Instead of an offset an abstract  \"page\" key is provided that offers\nan opaque \"pointer\" into some offset in a result set."
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "Number of results to return."
        }
      },
      "description": "General way to handle pagination in all listing resources."
    },
    "apigatewayPaginationResponse": {
      "type": "object",
      "properties": {
        "nextPageKey": {
          "type": "string",
          "description": "The key/pointer string that subsequent List requests should pass to\ncontinue the pagination."
        }
      },
      "description": "Standard way to pass pagination related responses, eg the next page key\nthat can be passed on a paginated request to get the \"next page\" of results."
    },
    "apigatewayPostExecution": {
      "type": "object",
      "description": "NO description for PostExecution yet.",
      "title": "PostExecution"
    },
    "apigatewaySession": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "priority": {
          "type": "string"
        },
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "A session that is started by a developer or those working on an incident.",
      "title": "Session"
    },
    "apigatewayUpdateDagRequest": {
      "type": "object",
      "properties": {
        "dag": {
          "$ref": "#/definitions/apigatewayDag",
          "title": "Dag being updated"
        },
        "updateMask": {
          "type": "string",
          "description": "Mask of fields being updated in this Dag to make partial changes."
        }
      },
      "description": "The request for (partially) updating an Dag.",
      "title": "UpdateDagRequest"
    },
    "apigatewayUpdateDagResponse": {
      "type": "object",
      "properties": {
        "dag": {
          "$ref": "#/definitions/apigatewayDag",
          "title": "Dag being updated"
        }
      },
      "description": "The request for (partially) updating an Dag.",
      "title": "UpdateDagResponse"
    },
    "apigatewayUpdateNodeRequest": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/apigatewayDagNode",
          "description": "Node being updated.  If the node is updating in the \ncontext of a dag then the child_nodes are taken into\naccount otherwise just the static node is updated."
        },
        "updateMask": {
          "type": "string",
          "description": "Mask of fields being updated in this Node to make partial changes."
        },
        "nodeOps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apigatewayNodeOperation"
          },
          "description": "Info about nodes being added or removed."
        }
      },
      "description": "The request for (partially) updating an Node.",
      "title": "UpdateNodeRequest",
      "required": [
        "node"
      ]
    },
    "apigatewayUpdateNodeResponse": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/apigatewayDagNode",
          "description": "Node being updated.  Depending on the request this could\nbe the static node or the node in the context of the dag.\nFor raw/static nodes child/parent node info is omitted."
        }
      },
      "description": "The request for (partially) updating an Node.",
      "title": "UpdateNodeResponse"
    },
    "apigatewayUpdateSessionRequest": {
      "type": "object",
      "properties": {
        "session": {
          "$ref": "#/definitions/apigatewaySession",
          "description": "Session object from which we will be taking parametres to fill\nbased on the update mask."
        },
        "updateMask": {
          "type": "string",
          "description": "Mask of fields being updated in this Session to make partial changes."
        },
        "userOps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apigatewayUserOperation"
          },
          "description": "Operation on users - whether to add or remove by their ID."
        }
      },
      "description": "Request body for adding/removing users from a session.",
      "title": "UpdateSessionRequest"
    },
    "apigatewayUpdateSessionResponse": {
      "type": "object",
      "properties": {
        "session": {
          "$ref": "#/definitions/apigatewaySession",
          "description": "Updated session returned."
        }
      },
      "description": "Response body for adding/removing users from a session.",
      "title": "UpdateSessionResponse"
    },
    "apigatewayUserOperation": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "title": "ID of the user being added/removed"
        },
        "operation": {
          "type": "string",
          "title": "\"add\" or \"remove\" for now"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "description": "Authentication token, prefixed by Bearer: Bearer \u003ctoken\u003e",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "bearer": []
    }
  ]
}
